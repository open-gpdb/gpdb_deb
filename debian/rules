#!/usr/bin/make -f

# see EXAMPLES in dpkg-buildflags(1) and read /usr/share/dpkg/*
DH_VERBOSE = 1
DPKG_EXPORT_BUILDFLAGS = 1

GPDB_HOME_PREFIX := "/opt/greenplum-db"
# assumes that CWD is root of gpdb source
GPDB_SRC_DIR := $(shell pwd)
#GPDB_VERSION := $(shell ./getversion | tr " " ".")
GPDB_VERSION := $(shell ./getversion | cut -d' ' -f 1)
VERSION := $(VERSION)
PACKAGE := $(shell cat debian/control | egrep "^Package: " | cut -d " " -f 2)

IS_GPDB6 := $(shell expr ${GPDB_VERSION} : "\(^6\.[0-9]\+\.[0-9]\+\)")
IS_GPDB7 := $(shell expr ${GPDB_VERSION} : "\(^7\.[0-9]\+\.[0-9]\+\)")

ifdef IS_GPDB7
        EXTRA_CONFIGURE_FLAGS := --with-zstd
endif

ifdef IS_GPDB6
        # Fix GPDB compilation error due to gcc-7
        export CC := /usr/bin/gcc-6
        export CXX := /usr/bin/g++-6
        EXTRA_CONFIGURE_FLAGS := --with-zstd
endif

# This destination should NOT be debian/tmp, where certain packaging info stored and erased via dh_prep
# Also, this directory is duplicated in the "debian/install" file
DEBIAN_DESTINATION := ${GPDB_SRC_DIR}/debian/build
ORCA_SRC := ${GPDB_SRC_DIR}/gporca
SIGAR_SRC := ${GPDB_SRC_DIR}/sigar
XERCES_SRC := ${GPDB_SRC_DIR}/xerces-c-3.1.1
PXF_SRC := ${GPDB_SRC_DIR}/pxf

# needs for pxf
export JAVA_HOME := /usr/lib/jvm/java-1.11.0-openjdk-amd64
export GOPATH := ${GPDB_SRC_DIR}/go
export PATH := $(GOPATH)/bin:$(PATH)
#export GRADLE_USER_HOME := ${GPDB_SRC_DIR}
# debug
#$(info    GOPATH is $(GOPATH))
#$(info    PATH is $(PATH))
#$(info    GRADLE is $(GRADLE_USER_HOME))
#$(error   VRS is $(VERSION)) 

DEP := $(shell go get github.com/golang/dep/cmd/dep)
GINKGO := $(shell go get github.com/onsi/ginkgo/ginkgo)

include /usr/share/dpkg/default.mk

libsigar:
	mkdir -p ${DEBIAN_DESTINATION}
	cd ${SIGAR_SRC} && \
	mkdir -p build && cd build && cmake -D CMAKE_INSTALL_PREFIX=${DEBIAN_DESTINATION} .. && make && make install

xerces311:
	cd ${XERCES_SRC} && \
        mkdir -p build && cd build && ../configure --prefix=${DEBIAN_DESTINATION} && make -j4 && make install && \
        rm -rf ${DEBIAN_DESTINATION}/bin/*	

override_dh_auto_configure: libsigar xerces311
	./configure --with-perl --with-python --with-libxml --enable-mapreduce --with-gssapi \
		--with-extra-version="-oss" \
        --with-libs=${DEBIAN_DESTINATION}/lib \
        --with-includes=${DEBIAN_DESTINATION}/include \
        --prefix=${DEBIAN_DESTINATION} \
        --with-ldap \
	--enable-gpperfmon \
	--with-pam \
	--enable-pxf \
        --with-openssl \
        ${EXTRA_CONFIGURE_FLAGS}

%:
	dh $@ --parallel

override_dh_auto_install:
	make install
	# pxf
	sed -i "s#gradlew#gradlew -g ${PXF_SRC}/server/gradle-user-home#g" ${PXF_SRC}/server/Makefile
	#sed -i 's/gradlew/gradlew --stacktrace/g' ${PXF_SRC}/server/Makefile
	. ${DEBIAN_DESTINATION}/greenplum_path.sh && cd ${PXF_SRC} && \
            make && PXF_HOME = ${DEBIAN_DESTINATION}/pxf make install
	# the staging directory for creating a debian is NOT the right GPHOME.
	# change GPHOME to point to the post-install target install directory.
	sed -i "s#GPHOME=.*#GPHOME=${GPDB_HOME_PREFIX}-${GPDB_VERSION}#g" ${DEBIAN_DESTINATION}/greenplum_path.sh
	# remove bundled python from open-source package
	rm -rf ${DEBIAN_DESTINATION}/lib/python/Crypto
	rm -rf ${DEBIAN_DESTINATION}/lib/python/lockfile
	rm -rf ${DEBIAN_DESTINATION}/lib/python/paramiko
	rm -rf ${DEBIAN_DESTINATION}/lib/python/psutil
	rm -rf ${DEBIAN_DESTINATION}/lib/python/yaml
	rm -rf ${DEBIAN_DESTINATION}/include/xerces
	rm -rf ${DEBIAN_DESTINATION}/include/sigar
	# gpbackup/gprestore install
	mv ${GPDB_SRC_DIR}/gpbackup* ${DEBIAN_DESTINATION}/bin/ && chmod +x ${DEBIAN_DESTINATION}/bin/gpbackup*
	mv ${GPDB_SRC_DIR}/gprestore ${DEBIAN_DESTINATION}/bin/ && chmod +x ${DEBIAN_DESTINATION}/bin/gprestore
	# Remove fault injector and other packages
	#while read file; do\
      #if [ -f "${DEBIAN_DESTINATION}/$${file}" ]; then\
        #echo "Deleting: ${DEBIAN_DESTINATION}/$${file}"; \
        #rm "${DEBIAN_DESTINATION}/$${file}"; \
      #else\
        #echo "File $${file} does not exist. Skipping." ; \
      #fi;\
    #done < ${GPDB_SRC_DIR}/gpAux/releng/NON_PRODUCTION_FILES.txt; \


# since we need orca to build before configuring, and configuring happens before dh_auto_clean,
# we can either add a make dependency here, which will cause and orca/configure to happen multiple times,
# or, since we assume that this build is happening in concourse on a brand new container,
# we can  make this step into a no-op: the container is clean to begin with.
override_dh_auto_clean:
	echo "Skipping clean"

override_dh_auto_test:
	echo "Skipping auto test"

override_dh_gencontrol:
	echo "using version ${VERSION} for binary"
	dpkg-gencontrol -v${VERSION} -Pdebian/${PACKAGE}

override_dh_shlibdeps:
	LD_LIBRARY_PATH=${DEBIAN_DESTINATION}/lib dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

clean_dev_local:
	rm -rf sigar/build
	rm -rf xerces-c-3.1.1/build
	rm -rf ${DEBIAN_DESTINATION}
